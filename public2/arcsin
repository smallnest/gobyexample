<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Assembly by Example: Arcsin</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="arcsin">
      <h2><a href="./">Go Assembly by Example</a>: Arcsin</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>The following example is the implementation of the <a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions">Arcsin</a> function (the inverse of sin) taken from the <a href="https://golang.org/src/math/asin_386.s">standard Go library</a>.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/Ebh5feXw0Q"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;fmt&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">Asin</span><span class="p">(</span><span class="nx">x</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">Asin</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>This <code>#include</code> is required to use Go Assembly&rsquo;s constants like <code>NOSPLIT</code>. Otherwise their associated number can be used instead (<code>NOSPLIT=4</code>).</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">#</span>include <span class="s2">&quot;textflag.h&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>In this example, we use the <code>TEXT</code> instruction with 3 arguments instead of 2. The new argument <code>NOSPLIT</code> is an optimization to warn the compiler that no expansion of the stack will be needed. Indeed, the third argument indicates a stack of 0 bytes.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">TEXT Â·Asin(SB),NOSPLIT,$0-16</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To implement the Arcsin function on a <code>float64</code> argument, the FPU registers will be used.
<code>FMOVD</code> sets <code>F0</code> and <code>F1</code> to the function&rsquo;s input <code>x</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FMOVD   x+0(FP), F0</span>
<span class="go">  FMOVD   F0, F1</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FMULD   F0, F0      </span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>FLD1</code> pushes +1.0 onto the FPU stack. This makes <code>F0 = 1</code>, <code>F1 = F0</code> and <code>F2 = F1</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FLD1</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>FSUBRDP</code> substracts <code>F0</code> to <code>F1</code> and stores it in <code>F1</code>. It then pops the FPU stack, this makes <code>F0 = F1</code>, <code>F1 = F2</code> and <code>F2 = NaN</code>.<br />
In other words: <code>F0 = 1-x*x</code> and <code>F1 = x</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FSUBRDP F0, F1 </span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>FSQRT</code> computes the square root of <code>F0</code> and stores it in <code>F0</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FSQRT</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>FPATAN</code> computes <code>arctan(F1/F0)</code> and stores it in <code>F1</code>, then it pops the FPU stack placing the result in <code>F0</code> and setting <code>F1</code> to <code>NaN</code>.<br />
This gives us  <code>arctan(x / sqrt(1 - x * x))</code> which is a way to compute the arcsin function on <code>x</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FPATAN</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>FMOVDP</code> moves the result to the return address (the memory offset from <code>FP</code> after the argument of 64-bit) and pops the FPU stack, getting rid of the last FPU value <code>F0</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">  FMOVDP  F0, ret+8(FP)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="go">  RET</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="sync-atomic">Sync Atomic</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/lyon01_david">@lyon01_david</a> | based on <a href="https://gobyexample.com/">Go by Example</a> by <a href="https://twitter.com/mmcgrana">@mmcgrana</a>
      </p>
    </div>
  </body>
</html>
