<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Assembly by Example: Hello</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="hello">
      <h2><a href="./">Go Assembly by Example</a>: Hello</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/CC74KsFvSb"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The underscore _ is to avoid an &ldquo;unusued package&rdquo; compiler error.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="nx">_</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">hello</span><span class="p">()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">hello</span><span class="p">()</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>This include is needed to use certain Go Assembly constants (instead of their assigned number). For example the <code>RODATA</code> that we use later. Other pre-processor maccros can be used in Go Assembly (like <code>#define</code>).</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">#</span>include <span class="s2">&quot;textflag.h&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can only place global words with <code>DATA</code> by 1, 2, 4 or 8 bytes at a time. The &lt;&gt; after the symbol name is to restrict this data to the current file.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">DATA world&lt;&gt;+0(SB)/8, $&quot;hello wo&quot;</span>
<span class="go">DATA world&lt;&gt;+8(SB)/4, $&quot;rld &quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>GLOBL</code> is used to make the address global and read only (<code>RODATA</code>) for the relevant length (12).</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">GLOBL world&lt;&gt;+0(SB), RODATA, $12</span>
<span class="go">	</span>
<span class="go">TEXT 路hello(SB),$88-0</span>
<span class="go">	SUBQ	$88, SP</span>
<span class="go">	MOVQ	BP, 80(SP)</span>
<span class="go">	LEAQ	80(SP), BP</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A Go string is created in my_string (a pointer to the string followed by the string&rsquo;s length).</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">	LEAQ	world&lt;&gt;+0(SB), AX </span>
<span class="go">	MOVQ	AX, my_string+48(SP)        </span>
<span class="go">	MOVQ	$11, my_string+56(SP)</span>
<span class="go">	MOVQ	$0, autotmp_0+64(SP)</span>
<span class="go">	MOVQ	$0, autotmp_0+72(SP)</span>
<span class="go">	LEAQ	type路string(SB), AX</span>
<span class="go">	MOVQ	AX, (SP)</span>
<span class="go">	LEAQ	my_string+48(SP), AX        </span>
<span class="go">	MOVQ	AX, 8(SP)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>convT2E</code> from the <code>runtime</code> package is used to create an interface.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">	CALL	runtime路convT2E(SB)           </span>
<span class="go">	MOVQ	24(SP), AX</span>
<span class="go">	MOVQ	16(SP), CX                    </span>
<span class="go">	MOVQ	CX, autotmp_0+64(SP)        </span>
<span class="go">	MOVQ	AX, autotmp_0+72(SP)</span>
<span class="go">	LEAQ	autotmp_0+64(SP), AX        </span>
<span class="go">	MOVQ	AX, (SP)                      </span>
<span class="go">	MOVQ	$1, 8(SP)                      </span>
<span class="go">	MOVQ	$1, 16(SP)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Println is called with the interface created</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="go">	CALL	fmt路Println(SB)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>This is pretty complicated, the lesson here is don&rsquo;t try to call functions from Go&rsquo;s assembly.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="go">	MOVQ 80(SP), BP</span>
<span class="go">	ADDQ $88, SP</span>
<span class="go">	RET</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="arcsin">Arcsin</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/lyon01_david">@lyon01_david</a> | based on <a href="https://gobyexample.com/">Go by Example</a> by <a href="https://twitter.com/mmcgrana">@mmcgrana</a>
      </p>
    </div>
  </body>
</html>
